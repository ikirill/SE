from mpmath import *
from itertools import combinations_with_replacement
from functools import reduce

import sage.functions.other as sfo

mp.pretty = True

relationLog = open('relations.txt', 'a')

# Emacs function to put Mathematica's CForm expression into pythonic form
# # (defun fix-math ()
# #   (interactive)
# #   (save-excursion
# #     (save-restriction
# #       (narrow-to-region (region-beginning) (region-end))
# #       (dolist (word '(("Power" . "pow")
# #                       ("Pi" . "pi")
# #                       ("Log" . "log")
# #                       ("PolyLog" . "polylog")
# #                       ("ArcCoth" . "arccoth")
# #                       ("Zeta" . "zeta")
# #                       ("Complex" . "mpc")
# #                       ))
# #         (goto-char (point-min))
# #         (while (search-forward-regexp (concat "\\<" (car word) "\\>") nil t)
# #           (replace-match (cdr word) t)))
# #       (while (search-forward-regexp "\n *" nil t) (replace-match " "))
# #       )))


# (defun fix-latex ()
#   (interactive)
#   (save-excursion
#     (dolist (word '(("\\left" . "")
#                     ("\\right" . "")

#                     ("\\log (2)" . "\\log2")
#                     ("\\log ^2(2)" . "\\log^22")
#                     ("\\log ^3(2)" . "\\log^32")
#                     ("\\log ^4(2)" . "\\log^42")
#                     ("\\log ^5(2)" . "\\log^52")

#                     ("\\log (3)" . "\\log3")
#                     ("\\log ^2(3)" . "\\log^23")
#                     ("\\log ^3(3)" . "\\log^33")
#                     ("\\log ^4(3)" . "\\log^43")
#                     ("\\log ^5(3)" . "\\log^53")

#                     ("\\log (5)" . "\\log5")
#                     ("\\log ^2(5)" . "\\log^25")
#                     ("\\log ^3(5)" . "\\log^35")
#                     ("\\log ^4(5)" . "\\log^45")
#                     ("\\log ^5(5)" . "\\log^55")
#                     ))
#       (replace-string (car word) (cdr word) nil (line-beginning-position) (line-end-position)))
#     )
#   )

## {{{ Special values, etc.

# weight 4
test0 = '\
2.976388892705630026669010165488211732630565117776498996128184592471331694514164\
32803150149883967477239072473824711754164010619683006762471052550966546960281949\
14045725048018306470190207719820024116476421032778141970572997105663863145159591\
83890688269911227929370186580919863698789372224107607296340704988409806463340878\
24332827712012818081625367738866604713736244662729311165937361546804961858165021\
43095203893059992943753845539897974032148556371853067493454736150049205192381938\
79113201941386357116976289031363726320556785099678929249221087633633727041392878\
55724119696416301332507639019142803759893591121411125909012015778577293033835919\
20814137136411296048937333471145579269200772826006098492311315750190389877117497\
52230633890332469553931586715323669343394424271271722925311928137100404080574450\
13106644297802697306968152871876168595023678292429184429328025727310951820275231\
17224327733767014730178831769540556463032388042472440449146021650699247007708311\
98009831003565576109706816303018864703735343493014447845289267493168802264769883\
77341742911804271258026402058458144540497315337435641702706944885900058407402363\
45240929555899776577731908630385929265964752643548579474382195538427118142251726\
02775249797761845392994427130865720727294406070183995991063216076217885557892358\
93319003506618735078459508462233626432991871207269116428388346679073216228040529\
84467843425200975011433458565158907368671295184576890412754057265527810362366203\
17656366998033557862059063476171762500669321253810509864922984666561094329599077\
46260477206872454600808788157648614008701498998019854735045099405464456223642364\
06123950396284187876320374094822014912362096766927568197217599258765689677336520\
31684709727576128633229731834690782449316920034318322827988429897227033682558445\
10199760507653854800304074210298671848613419629186404300128754041543638839672203\
42369017434944294093662910365229131073636544385993691715695237806280052897279115\
13063868680931101801394882297662071592955668770958235204219320822231456890345975\
46662529123989055238202876247075104959171424677239711945041189905166529015138517\
25758814261648430369388192956847243709435685769353981464427814962180028253557177\
48233667444556839550559504200492094887761600521006095051977484799946502541231474\
59945970889204804235427953054388190542223002919155646554882915206609752738785227\
87043155517402522539082399256962153665358776954939124162200254169012442363205485\
61445720872594943206152093293695220840248817313189082980190603289451419701533301\
06039033375754679503199665263296785182332338414329261609755130187014044146682087\
56149232563193435008738586771762933670793093153703227575457611432471443725943339\
70614656206438573449280742695876586726644127919374601106823475790803505788109276\
34569731677223360014515778891954773853673872306746124614075454860206193767098383\
87493201789256573658857099242639622835076188352263450466810674912148380227728749\
18221966885807901093617586029580580340435834900450846227014390043770175284468594\
93207703203300093288794671420581545670858158510816761959214398775349927760032351\
6707258333569637805947285658452188487707572660606895059631722719'

# weight 6
test1 = '\
0.123463088792391523146196729620681319998233224703427233708945861774761592509164\
32393641678413672424057424849732654430384908060609223476880359906565073334426341\
05243621520320729481678160046728089047076820573926512337748100039535502996487663\
14707613640975745404685521210011608952331491710232033114272145556241130528402133\
01949583995365832004943218501181237881198532154725233794451402627084363400413889\
82465732029744455740456915236525708200213061646051484161544357830387287194152515\
97091773623290541180500486218969435832643517231327924135618712707674360071501634\
56283805678418665990744984083356602619312115691071637373195352976880361806977369\
05574474581332564397493409708320263557203411077632089474604664683320774968716457\
83436990805553792315727112865102903217365858414219051766291518424887850375798248\
67722026450861023124169091123336048869599000220918187179302576451599146567013978\
95249720453839682367765507463610817985090902441607302047286992313470204191050119\
49957255651532837787269556627625744243823751208797768970192316619580729377003487\
76434827922501829454723319159775030049456790400253278612761947839190392189212251\
47903512772254576483090223086428825236791675624174531421441219388035147856754195\
79483206881076605875803783393805510935963185161372463191045795376388774878002231\
73405080352304578741640117102149623259242817820013214913190008736753107930925922\
69672122082913767563067994612823327136690779062267671844851337918454495802836791\
96872270055969754572123763389443111801334879606850464768537453073199941434925010\
41838765766061476748947501139173755531130431104792083652231710002531788556726605\
23731989680220885994065743664293765132048820105568695298259076395948669696340270\
86065542714882850502822506853889038517394585161018875951400697990695339460184322\
48342016194076817600926884181700144448941247347855366187695701909984230565602939\
88717761337203596609289101571729749726181609066438126259432775409065376363438035\
61484563631125701211616654263104375455089557876733747902396415205244709297007444\
41273872344863291742240630608321532615435410960677070010541119248003205151286679\
37991160485488086302723260010812712070005250766733206985837888675310890373834424\
23902654866207127027692781288929056979527330608096680253058736184866557058885233\
94846481024976713890739629150101021572221675254510471599136910909594553559922797\
61694129474167329752613526716937048329372539782603094744013097656742487270740308\
69366569370203280067596295580217975801224403579329342061930107528420841855226248\
98582921554029701939584702195574381289735155039630498984053769261938074886263583\
24706528536219998275946144337737459959738324356013393948308705463634890182188250\
32031235800778273867037996727521142682727668515455788751423877612522061557444521\
96451164761406442909168535218830351218713036713786870124324651115681121362026680\
95783660305956330806315895589173232106550081174937845707562441300053488853360804\
69490263611789054329387162646185512646782058299647858165948808294443829089949661\
38528355124422391358817778326277052602666800923231285646162890058791316265935744\
93199340255132637956655622021667148143855952838026785963032696339'

# weight 4
test2 = '\
0.424631717657223149870286004394363375361436679864415918977921744628701472646553\
13471571853888517694024487333876576822998886805959431578784974706445785638240331\
05506520820378148025625539480232471780405536958430093891695289613568234618951485\
79244082271455620811499898554344144463801915447043459527875644987581214390610936\
85127006562761098280597245723426858086389237808517849404918347667593440556204083\
51758614176159849902398900176568745365829166464783237611603274791980421662824937\
63667764594978235764939426095503281368214290119134335356127221103009836082057343\
53735270283812169690733863088155138331238950353523293302335966677440748066243782\
26450688498172403193452061873310845598439524278679475209158313696986333964298183\
64844432099625730287744410290003874605927740110405969984192359137984003755085695\
44815341946087716033322375550696234686349323461643568172676536537972545170878201\
58531944786261779494182885974823887557945677712485825128042627524322337002843944\
93377360691422377707559983328977730262748606366980136402250429311253121941055043\
35910074166500040660781541116130644452981206555980680168954786378658665454838579\
61623486784526889428737563967998397346381884804442397830473095410057012692270700\
73578120561254553818496489548990935092346166326912906852202275311437760905504225\
07366227481111948114444859839157897596613567283359780265905308761751789942628210\
89158419389860051982690485171102934612588129689270392514411132298900154855154876\
29850317203042451173688539146565000186693058624546820233643362184490829453755718\
11061280155881818200842900608162947457534799404643666270503404396339435634581687\
58225104012233978223857362488511445704731917917638220468350586700251669945626890\
09032111835014768963888284548855506529643477619447179224367965141694639148471904\
29127196432634840078120225708655203725323776602555666803694014273536136436940198\
69046237354349336816539662179902945297761093631256975962466497837858089257214645\
66234207348308451133507365609724674544941712699574938203452565924345885748318570\
59842534723052694412149288367653458090639117770572650697904730997794561049190655\
25377860883515887935281020206253785879889045129874974524965055674572098420834307\
91555293873239194469974014981493363109878592276456529970859170368924900794790745\
89133349972684584135212516707074956730929084718372007375310390001941437273584226\
66197113358265700500145111722479380326122596405993242739712709488770052709561943\
54455410794259637138611818925100899546334715581485879501353736205950917525755833\
92468122057777440466016290726679562200426249203466498257059066005671743164034145\
74430366302068057476860154215752810928592117294561620472643205108333565664997687\
33166135132057045934242540217261253799074880324985388852015928253548453268737052\
20463205885174755381407556375690376635860477944984581059870967057962227917594867\
73310063710242518620508322392213555739099077438698877858505050421275766725047912\
80540414989068026130222159007500347608709024223265990825482423497509170810468536\
92777328153417874262780303690697739161398165105119132414743403630259310969746566\
86928841004440076680856669152711562312082385116148205331470619986'

vresh1 = '-0.1990284251538415592581715805850820414184318417199958312903800538110\
8415480916897305545770649465221345570111175421956502115664013185482126\
3151372130033694175922974489043985496457505479412683411701056211771113\
9918602030253101239289333296681681892337453124787809693689763210978806\
9717549606482939635722826006675382504783201652860868267106242961347415\
1305296728374873185135982095064415243166940282898256855651994729776826\
3195194724150864901735446988285610654221970730320103985614175229845804\
4187717724609376741743082017005123128160771963755678365773878375327828\
5479890422789925087444521127493173155444775677967693359043872225600494\
2451775205071639355161262083916936211683366510177641081759533759219399\
6251597607156454831860131506917173652075230099443246423551822671331614\
4877591114732954252864105885206349116648415936957833849810552807073069\
6899479968182661190008839713644873561029620008046724173499900342690459\
6281841055833173844221340900092523403204447584981185583828943504355328\
9430225198792290223016167154467751427688931719111325801301774984585350\
6367053633825928617024291346334859287608117047023118388164674355083273\
3186404657268353803798287635818270147798156064542574557065202172894384\
3269350677781734122382115234005408627628160118507664203226281277841680\
0054989272027264498035071369587603153892005687184543450685048661906173\
3329784339076163201122203942378002907264667631854681191694029543879926\
5097263380451177751978909984433205377383017694631698139001034001511440\
8904747521341097697115655364699296500639090967255297981522746544136881\
4190540288579999988383698177820349536205058115730727151911174871736854\
8329910447303695174777806487038920532551432158458106258055805441248419\
0204174788697975058348259084387753850686485551118039813031253283826995\
4799765998197467536469487965710984477051523103427673170809650129700548\
0626013674629255160926990400416396177789674725860131450673082069118112\
4333539991568751183549062046602859431322873330688310570114547311119010\
6195471643014800990305442596666123684654818929012729387585728445298663\
7469660603374583935823976889071847926905561604993825624772100844747046\
2431624414715768804919738051550115419591379670711406046763496619575964\
2107659933937476978636131910434960062836309544822967641537999288370608\
9223006292083442423864253605872409900119468105400703995915018821144055\
8044641413230435155381335678307739484602379768666668454252682979447146\
5682652745368026948385725360033309563850065699567768048569012502445529\
6764594176063672584414413435201468844439929049335345278582992935677951\
1310960632475968667134160904003248429015678229249908166442099114322565\
6097609211857966027250225511471022028161049016616627382354969023188952\
1474778253406417635110520127845975400488598204719317633480033370238850\
9653885441186792675765640685336150890318201840610097435299664060207221\
1581170272065517716714189803957627412348567416040883745991121159440228\
2574368947631855631640600766614688320765539607152924310142540906626879\
298954240437750650109019538550316286154639706371991306609793400797'

vresh3_3e3 = '\
-6.1665252325192513801994672415450909679747097867356795481051555489006\
2901293766831604286738897627671840157855368193616620389896747469861096\
8043191576514466969111102560262421892085493578617987878433714676424592\
9283472061538759382784107257868054813220809414314097181328328235618698\
6584616432048202339590673731331122322764339359033430375138746021483086\
6009413145717074568498321878432214393493614693052515397679495036486108\
2634931318753797339997263983348604310209433639141630528347720072582867\
2324827632743080268931507141414583934463580532232077518829253478349233\
6663936118561314919465486162779059665141739038112703137905553621384708\
3108552333834390992705118017900093126399219730509993130943204979173346\
3133166228565307113899229922088529919324985847710530592611680278830239\
1090503185149493182906669330640984396482351487967762688270806711820721\
5516198179347287822172839769909277884615521148134623559344413135462312\
4116113100257069575402491723744471958455319872051091659495788896117143\
7790493582069538621059119522559707508311109680773260247068722269343024\
2630946836957367790545910501459452205437266658530583516082248966813290\
1389712387711924155649523697376045948375491021738188190568178658261400\
8589369027408964399954134429774439934230619380861156728109630964581717\
7305391505129683005332345025160304106422621065814508138947587285724284\
3704534994621998069993597340039038052009561563434656481207435595205678\
2572311824900758258592604061905086268887093147595035462491307918996701\
3171742620532165341634847287756208099364271846089158782589151504135530\
9406697749577115894072453258588481295680067464580075660013855139909858\
9397673746611569420774138331226045631702218504402208110130021336748260\
2633650974288855345539714881938929864542212912619230446596595164178227\
7421919548829492053416061928747886001140451446567181957576288110632867\
8348789783643663047870328844374540964818122811539849299252040260538223\
8605551512349972640043598345981356123900259632666447862351229558094755\
5533115878244879254106602511393793034407462699826175182431009775115876\
3738228614430009743335153183809656892645885123820556185742646308926554\
9942668769981566633539753282033953276757815699319462831335812824851673\
4117624087265868885501971478067177609062782693625352543366677794387048\
8175941682855198688485899413005767897395475446323050997657210410605444\
9376356654467202763683515558620108291736391057526477183850958687733718\
3523283874943023761738622442378297285626657085409011555094678888974554\
0945863345831888623692333438235548830159323762410439814482673249274911\
1678702135191989133902327771240847856036306795291971650481506162111516\
9330726211600370544378033967739318660407529654837355702537036541879138\
8220696475347494258455629029010247977616842334061843828261060407502296\
8017187633931718696682839155173259342868812482770596383204675397776095\
6911926075075822110892355112650192376558290573130570714517862943524899\
1521171685682041554386919179287297540869525449079013294625429516426288\
74122818263420760264506426708563259280910135590069361187862547268'

logweight6 = '\
-0.1169038672612339603843144290406631073462538541151776617421624179828\
9724562016199657843384501939560401816592504072526954184600069265198362\
7727173627140398235397950129628059148885564642209067731676916541501017\
6138149290811947217991986831364321752181573009420426557668600263505051\
0657037779675840448144978023619529581586888894555508941854710266907332\
8323600203526013028920590660090275269992544812231786637162040512922707\
7119733373277996780811091905830319320097666813777003790097059847560330\
8153598573305488353470587785503463295741790067911055132435714396632708\
9819711840755346100874861930190955255376893838975185922151536854086537\
0558787548540738018505457509686065243949410722490411287828633715333596\
5144706827712761705930432028276385460028717691815668185727682870248291\
7816408440765301638175187062930497951481423207978767521117006290053771\
2061614718752560765112125154695858331061906876410049299011915664533699\
7064089694854710767101341669771746362306365797328024099607412245935747\
3960537991873016912064219059184688638816579776181092200412671040081486\
5522439247338977590535595074080417450658147917689768360813118019060068\
2515233709263212702374134599933129620332793376915962430868446834104278\
2121791620680562996174215251680240004876354908471700928920246112047212\
8365194230896000694572446221875948068657008715753686368663842305110424\
1203660208010751518103469298238125059749634035201508894839333716017243\
1387570926789443479216591409041165931334830835088452928181515443161187\
6743505370155121494239422647862416826680047100208643851179134142036090\
3974559040294301646953137676221055427659286896870730657253670368790772\
3514065373797945215289852353364032370800064902449002010228142255402964\
4268830993736046423652154094517233557026788608939660310995497839831732\
7070883970824825384654756783358663821148175356803969476537918860381500\
3434577544853684420997537874031585393910721493274643012702730198095653\
4109249560096276594552054191117044603016862828394702493612400270297545\
3579247885861666985578838336541158105250818515277632962863559683783426\
9358176368887826194650490403492089930551946715393791093618923429769745\
4509576635910771725066615381973307403837061969508509107064361515880919\
3133327452488179326112283487153771791861568156942672283655561867479293\
2494839448236607591002866679657328723368317659264229424777356413935567\
2083484727412503850607760340603445726818096259049196358139609307755137\
8200819092718473773862887638188074598847909288335659078755828770113126\
8638249232328519183449458912096756195860999974515290116733240621802436\
8871435283976647572126888978813733489957422763569510236503848967517106\
8792720261512428458269920499408474035007081776260322765199579538053975\
6160269172157351486112536733845600257810970352126614004291646614474893\
6987907281982745262291805139638543843395302120010571612784071557049997\
3068946007899357057471478048998064779767737461441428256533676672056015\
4845365105328636910932182355553022329832500936470234081098102833638399\
3911434126757868118140825069968512195982683361586342753822077052877061\
2794808265459427702396240301507069264978773645847553921745089153415540\
37181606556793526939844077'

## }}}
## {{{ Generation of constants

class Const:
  def __init__(self, value, name, pyname, weight):
    self.value, self.name, self.pyname, self.weight = value, name, pyname, weight
    if not (weight >= 0):
      raise ValueError("Zero-weight constants are disallowed")

  def __mul__(self, other):
    if self.weight == 0 or other.weight == 0:
      raise ValueError("Zero-weight combinations are disallowed")
    return Const(self.value * other.value,
                 self.name + "*" + other.name,
                 self.pyname + "*" + other.pyname,
                 self.weight + other.weight)

  def updateValue(self):
    prevValue = self.value
    self.value = eval(self.pyname)
    if abs(self.value/prevValue-1) > 1e-10:
      raise ValueError("Invalid updated value %s: (%s, %s)"
                       % (self.pyname, prevValue, self.value))

  def __repr__(self):
    return self.name

## }}}
## {{{ Searches for relations

def allCombinations(values, length):
  if length == 0:
    yield []
    return
  if len(values) == 0: return
  for i in range(length, -1, -1):
    for rest in allCombinations(values[1:], length-i):
      yield [values[0]] * i + rest

class ZetalogConstants:
  def __init__(self, maxWeight, logValues, polylogValues):
    zetas = [Const(zeta(k), "Zeta[%d]"%k, "zeta(%d)" % k, k)
             for k in range(2, maxWeight+1) if k == 2 or k%2 == 1]
    logs = [Const(log(u), "Log[%d]"%u, "log(%d)" % u, 1)
            for u in logValues]
    polylogs = [Const(polylog(k, mpf(u[0])/mpf(u[1])),
                      "PolyLog[%d, %d/%d]" % (k, u[0], u[1]),
                      "polylog(%d, mpf('%d/%d'))" % (k, u[0], u[1]),
                      k)
                for k in range(2, maxWeight+1) for u in polylogValues]
    baseConstants = logs + zetas + polylogs
    baseConstants.sort(key=lambda x: x.weight)
    print("Base constants:", baseConstants)

    self.baseConstants = []
    for u in baseConstants:
      if checkNoRelation([u] + self.baseConstants):
        self.baseConstants.append(u)
    print("Reduced base constants:", baseConstants)

    self.mem = {}

  def gen(self, weight):
    if not (weight >= 1): raise ValueError("Invalid weight %s" % weight)
    if weight in self.mem: return self.mem[weight]

    ans = []
    for u in self.baseConstants:
      if u.weight > weight: continue
      elif u.weight == weight:
        if checkNoRelation([u] + ans):
          ans.append(u)
        else:
          print("Omitting %s" % u.name)
      else:
        for v in self.gen(weight - u.weight):
          w = u * v
          if checkNoRelation([w] + ans):
            ans.append(w)
          else:
            print("Omitting %s" % w.name)

    self.mem[weight] = ans
    return ans

# These can only be forbidden when other constants are also present.
# Mostly this is same-weight zeta functions, and logs of similar arguments
defaultForbiddenNames = [
  "PolyLog[2, 1/2]", "PolyLog[2, 1/4]", "PolyLog[2, 3/4]", "PolyLog[2, 2/3]",
  "PolyLog[3, 1/4]", "PolyLog[3, 3/4]", "PolyLog[3, 1/2]"
]

def zetalogConstants(weight, logValues, polylogValues,
                     forbiddenNames=defaultForbiddenNames,
                     dontBother=False,
                     verbose=False):
  # allConstants = ZetalogConstants(weight, logValues, polylogValues).gen(weight)
  # print("Constants: {%s}" % ", ".join([c.name for c in allConstants]))
  # print("[%s]" % ", ".join("Const(%s, \"%s\", \"%s\", %d)" % (c.pyname, c.name, c.pyname, c.weight) for c in allConstants))

  # return allConstants

  zetas = [Const(zeta(k), "Zeta[%d]"%k, "zeta(%d)" % k, k)
           for k in range(2, weight+1) if k == 2 or k%2 == 1]
  logs = [Const(log(u), "Log[%d]"%u, "log(%d)" % u, 1) for u in logValues]
  polylogs = [Const(polylog(k, mpf(u[0])/mpf(u[1])),
                    "PolyLog[%d, %d/%d]" % (k, u[0], u[1]),
                    "polylog(%d, mpf('%d/%d'))" % (k, u[0], u[1]),
                    k) for k in range(2, weight+1) for u in polylogValues]
  baseConstants = [x for x in logs + zetas + polylogs if x.name not in forbiddenNames]
  baseConstants.sort(key=lambda x: x.weight)
  if verbose:
    print("Base constants:", baseConstants)

  allConstants = []
  for combinationLength in range(weight, 0, -1):
    for combin in allCombinations(baseConstants, combinationLength):
      cc = reduce(lambda x, y: x * y, combin[1:], combin[0])
      if cc.weight == weight and cc.name not in forbiddenNames:
        allConstants.append(cc)
  relation = None if dontBother else pslqDefault([x.value for x in allConstants])
  while relation:
    recordRelation(relation, allConstants)
    index = [i for i in range(len(allConstants)) if relation[i] != 0][-1]
    print("Omitting %s" % allConstants[index].name)
    del allConstants[i]
    relation = pslqDefault([x.value for x in allConstants])

  # allConstants = []
  # for combinationLength in range(weight, 0, -1):
  #   for combin in allCombinations(baseConstants, combinationLength):
  #     cc = reduce(lambda x, y: x * y, combin[1:], combin[0])
  #     if cc.weight == weight and cc.name not in forbiddenNames:
  #       print(cc)
  #       if len(allConstants) >= 2:
  #         tryConstants = [cc] + allConstants
  #         relation = pslqDefault([c.value for c in tryConstants])
  #         if relation:
  #           print("Found relation:\n%s\n%s\nOmitting %s" %
  #                 (showConstantRelation(relation, tryConstants),
  #                  showConstantRelation(relation, tryConstants, py=True),
  #                  cc.name))
  #           if relation[0] == 0:
  #             raise ValueError("Found relation that should already have been found")
  #           continue
  #       allConstants.append(cc)
  # allConstants = list(allConstants)

  if verbose:
    print("Constants: {%s}" % ", ".join([c.name for c in allConstants]))
    print("[%s]" % ", ".join("Const(%s, \"%s\", \"%s\", %d)" % (c.pyname, c.name, c.pyname, c.weight) for c in allConstants))

  return allConstants

def ZL(weight, bound):
  return zetalogConstants(weight, primes(bound+1), fractions(bound), dontBother=True)

def Z(weight, upto=True):
  base = [cZeta(k) for k in range(2, weight+1) if k == 2 or k%2 == 1]
  ans = []
  for length in range(weight, 0, -1):
    for combin in allCombinations(base, length):
      cc = reduce(lambda x, y: x * y, combin[1:], combin[0])
      if (upto and cc.weight <= weight) or (not upto and cc.weight == weight):
        ans.append(cc)
  return ans

## }}}
## {{{ Check and record relations

def pslqDefault(x, maxcoeff=int(1e7), maxsteps=int(1e4)):
  "Same as pslq, but with more rigorous default arguments."
  if len(x) <= 1: return None
  if isinstance(x[0], Const):
    x = [c.value for c in x]
  relation = pslq(x, maxcoeff=maxcoeff, maxsteps=maxsteps)
  if relation:
    error = abs(sum(r * x for r, x in zip(relation, x)))
    print("Error: %.3e ulp" % float(error/mp.eps()))
  return relation

def showConstantRelation(relation, values, py=False):
  if not py:
    relString = ",".join("%d" % r for r in relation if r != 0)
    valString = ",".join(v.name for r, v in zip(relation, values) if r != 0)
    return "{%s}.{%s}" % (relString, valString)
  return "(%s)" % "+".join("(%d)*%s" % (r, v.pyname) for r, v in zip(relation, values) if r != 0)

def recordRelation(relation, constants):
  print("Found relation:\n%s\n%s" %
        (showConstantRelation(relation, constants),
         showConstantRelation(relation, constants, py=True)))
  relationLog.write("%s\n" % showConstantRelation(relation, constants))
  relationLog.flush()

def checkNoRelation(constants, verbose=True):
  if len(constants) < 2: return True
  relation = pslqDefault([x.value for x in constants])
  if not relation: return True
  if verbose: recordRelation(relation, constants)
  return False

## }}}
## {{{ Find relations

def findRelation(numberSpec, constants,
                 name=None,
                 tol=None,
                 maxcoeff=int(1e9),
                 maxsteps=int(1e6),
                 verbose=True, returnValue=False):
  number = numberSpec() if callable(numberSpec) else mpf(numberSpec)
  values = [number] + [c.value for c in constants]

  if name: print("Looking for a relation for %s = %f" % (name, float(number)))

  relation = pslq(values, tol=tol, maxcoeff=maxcoeff, maxsteps=maxsteps)
  if not relation:
    if verbose: print("NO RELATION")
    return
  if relation[0] == 0:
    print("BAD RELATION, There is a relation among the constants")
    recordRelation(relation[1:], constants)
    return

  if verbose:
    print("Found relation:")
    error = abs(sum(r*x for r, x in zip(relation, values)))
    coefNorm = sum(abs(r) for r in relation)
    print("Error: %.2e ulp\nNorm:  %.1e" % (float(error/mp.eps()), coefNorm))

    mathName = "%s/(%d)" % (showConstantRelation(relation[1:], constants), -relation[0])
    pyName = "%s/(%d)" % (showConstantRelation(relation[1:], constants, py=True), -relation[0])
    if error < mpf('1e10') * mp.eps():
      print("%s\n%s" % (mathName, pyName))

    if isinstance(numberSpec, str) and len(numberSpec) > mp.dps:
      with workdps(len(numberSpec)):
        err = -log10(abs(eval(pyName) / mpf(numberSpec) - 1))
        print("Accurate digits: %.1f" % err)
    elif callable(numberSpec):
      with extradps(100):
        [c.updateValue() for c in constants]
        relValue = sum(r*c.value for r, c in zip(relation[1:], constants)) / (-relation[0])
        trueValue = numberSpec()
        err = -log10(abs(trueValue/relValue - 1))
        print("Accurate digits: %.1f" % err)

  if returnValue:
    return relation

## }}}
## {{{ Pre-generated constants

c234_4 = [Const(log(2)*log(2)*log(2)*log(2), "Log[2]*Log[2]*Log[2]*Log[2]", "log(2)*log(2)*log(2)*log(2)", 4),
          Const(log(2)*log(2)*log(2)*log(3), "Log[2]*Log[2]*Log[2]*Log[3]", "log(2)*log(2)*log(2)*log(3)", 4),
          Const(log(2)*log(2)*log(3)*log(3), "Log[2]*Log[2]*Log[3]*Log[3]", "log(2)*log(2)*log(3)*log(3)", 4),
          Const(log(2)*log(3)*log(3)*log(3), "Log[2]*Log[3]*Log[3]*Log[3]", "log(2)*log(3)*log(3)*log(3)", 4),
          Const(log(3)*log(3)*log(3)*log(3), "Log[3]*Log[3]*Log[3]*Log[3]", "log(3)*log(3)*log(3)*log(3)", 4),
          Const(log(2)*log(2)*zeta(2), "Log[2]*Log[2]*Zeta[2]", "log(2)*log(2)*zeta(2)", 4),
          Const(log(2)*log(2)*polylog(2, mpf('1/3')), "Log[2]*Log[2]*PolyLog[2, 1/3]", "log(2)*log(2)*polylog(2, mpf('1/3'))", 4),
          Const(log(2)*log(3)*zeta(2), "Log[2]*Log[3]*Zeta[2]", "log(2)*log(3)*zeta(2)", 4),
          Const(log(2)*log(3)*polylog(2, mpf('1/3')), "Log[2]*Log[3]*PolyLog[2, 1/3]", "log(2)*log(3)*polylog(2, mpf('1/3'))", 4),
          Const(log(3)*log(3)*zeta(2), "Log[3]*Log[3]*Zeta[2]", "log(3)*log(3)*zeta(2)", 4),
          Const(log(3)*log(3)*polylog(2, mpf('1/3')), "Log[3]*Log[3]*PolyLog[2, 1/3]", "log(3)*log(3)*polylog(2, mpf('1/3'))", 4),
          Const(log(2)*zeta(3), "Log[2]*Zeta[3]", "log(2)*zeta(3)", 4),
          Const(log(2)*polylog(3, mpf('1/3')), "Log[2]*PolyLog[3, 1/3]", "log(2)*polylog(3, mpf('1/3'))", 4),
          Const(log(2)*polylog(3, mpf('2/3')), "Log[2]*PolyLog[3, 2/3]", "log(2)*polylog(3, mpf('2/3'))", 4),
          Const(log(3)*zeta(3), "Log[3]*Zeta[3]", "log(3)*zeta(3)", 4),
          Const(log(3)*polylog(3, mpf('1/3')), "Log[3]*PolyLog[3, 1/3]", "log(3)*polylog(3, mpf('1/3'))", 4),
          Const(log(3)*polylog(3, mpf('2/3')), "Log[3]*PolyLog[3, 2/3]", "log(3)*polylog(3, mpf('2/3'))", 4),
          Const(zeta(2)*zeta(2), "Zeta[2]*Zeta[2]", "zeta(2)*zeta(2)", 4),
          Const(zeta(2)*polylog(2, mpf('1/3')), "Zeta[2]*PolyLog[2, 1/3]", "zeta(2)*polylog(2, mpf('1/3'))", 4),
          Const(polylog(2, mpf('1/3'))*polylog(2, mpf('1/3')), "PolyLog[2, 1/3]*PolyLog[2, 1/3]", "polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))", 4),
          Const(polylog(4, mpf('1/2')), "PolyLog[4, 1/2]", "polylog(4, mpf('1/2'))", 4),
          Const(polylog(4, mpf('1/3')), "PolyLog[4, 1/3]", "polylog(4, mpf('1/3'))", 4),
          Const(polylog(4, mpf('2/3')), "PolyLog[4, 2/3]", "polylog(4, mpf('2/3'))", 4),
          Const(polylog(4, mpf('1/4')), "PolyLog[4, 1/4]", "polylog(4, mpf('1/4'))", 4),
          Const(polylog(4, mpf('3/4')), "PolyLog[4, 3/4]", "polylog(4, mpf('3/4'))", 4)]

## }}}
## {{{ Standard constants

def cOne():
  return Const(mpf(1), "1", "1", 0)

def cZeta(s):
  return Const(zeta(s), "Zeta[%d]" % s, "zeta(%d)" % s, s)

def cLog(s):
  return Const(log(s), "Log[%d]" % s, "log(%d)" % s, 1)

def cTrilog(x):
  s = x
  if isinstance(x, str):
    s = map(int, x.split('/'))
  u = mpf('%d/%d' % s)
  return Const(polylog(3, u), "PolyLog[3, %d/%d]" % s, "polylog(3,mpf('%d/%d'))" % s, 3)

## }}}
## {{{ Trilogarithm identities

def validRelation(relation, constants, dps=100):
  # print(showConstantRelation(relation, constants))
  with extradps(dps):
    error = sum(r * eval(c.pyname) for r, c in zip(relation, constants) if r != 0)
    print("Error: %.1f" % log10(abs(error)))
    return abs(error) < ldexp(1, 30-mp.prec)

def allConstantProducts(weight, baseConstants, forbiddenNames=[]):
  allConstants = []
  for combinationLength in range(weight, 0, -1):
    for combin in allCombinations(baseConstants, combinationLength):
      cc = reduce(lambda x, y: x * y, combin[1:], combin[0])
      if cc.weight == weight and cc.name not in forbiddenNames:
        allConstants.append(cc)
  return allConstants

def triRelations(logValues, trilogValues,
                 forbiddenNames=defaultForbiddenNames,
                 maxdps=None, maxcoeff=int(1e9), maxsteps=int(1e6)):
  if isinstance(logValues, str):
    logValues = map(int, logValues.split(', '))
  elif not isinstance(logValues, list):
    logValues = primes(logValues+1)
  if isinstance(trilogValues, str):
    trilogValues = map(lambda x: tuple(map(int, x.split('/'))), trilogValues.split(', '))
  elif not isinstance(trilogValues, list):
    trilogValues = fractions(trilogValues)

  base = [cZeta(2), cZeta(3)] + map(cLog, logValues)
  print("Forbidden: %s" % forbiddenNames)
  constants = allConstantProducts(3, base) \
              + [x for x in map(cTrilog, trilogValues) if x.name not in forbiddenNames]
  print("Constants: %s" % str(constants))

  originalDps = mp.dps
  if maxdps is None: maxdps = max(100 + originalDps, 2 * originalDps)

  def doPslq():
    relation = pslq([c.value for c in constants], maxcoeff=maxcoeff, maxsteps=maxsteps)
    if not relation: return relation
    if not validRelation(relation, constants):
      mp.dps += 100
      if mp.dps > (maxdps or 2 * originalDps):
        print("Invalid relation found; stopping.")
        return None
      print("Invalid relation found; dps now %d" % mp.dps)
      [c.updateValue() for c in constants]
      return doPslq()
    else:
      return relation

  relationStrings, relationPyStrings = [], []

  relation = doPslq()
  while relation:
    recordRelation(relation, constants)
    index = [i for i in range(len(relation)) if relation[i] != 0][-1]
    relationStrings.append(showConstantRelation(relation, constants))
    relationPyStrings.append(showConstantRelation(relation, constants, py=True))
    print("Removing %s" % constants[index])
    del constants[index]
    relation = doPslq()

  mp.dps = originalDps

  print("Found relations (python expressions):")
  print("\n".join(relationPyStrings))
  print("Found relations:")
  print("{%s}" % ",\n".join(relationStrings))

## }}}
## {{{ Fractions and primes

def fractions(n):
  denominators = n if isinstance(n, list) else range(1, n+1)
  return [(a, b) for b in denominators for a in range(1, b) if gcd(a, b) == 1]

## }}}
## {{{ Gimmel's trilog question

def gimmel():
  t = lambda x: polylog(3, mpf(x))
  return 78*t('1/3')+15*t('2/3')-64*t('1/5')-102*t('2/5')+126*t('3/5') \
    +12*t('4/5')-89*t('1/6')-152*t('5/6')+63*t('3/8')+76*t('5/8')

def solveGimmel():
  alreadyDone = ["PolyLog[3, 3/8]", "PolyLog[3, 5/8]"]
  return triRelations([2,3,5], fractions([2,3,4,5,6,8]), maxdps=1000,
                      forbiddenNames=defaultForbiddenNames+alreadyDone)

## }}}
## {{{ Tunk-Fey weight-4 simplification question

def tunkfey1(a):
  a = mpf(a)
  return quad(lambda x: polylog(3, a*x)/(1+2*x), [0,1])

def tunkfey2(a):
  a = mpf(a)
  return quad(lambda x: polylog(2, a*x)*log(x)/(1+2*x), [0,1])

def tunkfey3(a):
  a = mpf(a)
  def f(x):
    l = log(x)
    return log(1-a*x)*l*l/(1+2*x)
  return quad(f, [0,1])

def tunkfey(which=3, ub=8, fb=4, skipValues=[]):
  func = [None, tunkfey1, tunkfey2, tunkfey3][which]
  cc = ZL(4, 4)
  arguments = range(-ub, 0) + range(1, 1+ub) + ["%s%d/%d" % (s, a[0], a[1]) for a in fractions(fb) for s in ["", "-"]]
  for a in arguments:
    if a in skipValues: continue
    print("tunkfey%d(%s)" % (which, a))
    try:
      findRelation(lambda: func(a), cc)
    except Exception as e:
      print("ERROR")
      print(e)


## }}}
## {{{ Tunk-Fey output, Integral 3

# sage: findRelation(tunkfey3(-8), ZL(4,4));
# Found relation:
# Error: 2.05e+03 ulp
# Norm:  7.8e+04
# {-280,3600,1620,-6000,2505,6000,-8640,-5040,4320,9360,-4320,-4320,1488,-4320,4320,-960,2520,-2880,2340,-2700}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(720)
# ((-280)*log(2)*log(2)*log(2)*log(2)+(3600)*log(2)*log(2)*log(2)*log(3)+(1620)*log(2)*log(2)*log(3)*log(3)+(-6000)*log(2)*log(3)*log(3)*log(3)+(2505)*log(3)*log(3)*log(3)*log(3)+(6000)*log(2)*log(2)*zeta(2)+(-8640)*log(2)*log(3)*polylog(2, mpf('1/3'))+(-5040)*log(3)*log(3)*zeta(2)+(4320)*log(3)*log(3)*polylog(2, mpf('1/3'))+(9360)*log(3)*zeta(3)+(-4320)*log(3)*polylog(3, mpf('1/3'))+(-4320)*log(3)*polylog(3, mpf('2/3'))+(1488)*zeta(2)*zeta(2)+(-4320)*zeta(2)*polylog(2, mpf('1/3'))+(4320)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(-960)*polylog(4, mpf('1/2'))+(2520)*polylog(4, mpf('1/3'))+(-2880)*polylog(4, mpf('2/3'))+(2340)*polylog(4, mpf('1/4'))+(-2700)*polylog(4, mpf('3/4')))/(720)

# sage: findRelation(tunkfey3(-3), ZL(4,4)
#                    Found relation:
# Error: 2.88e+02 ulp
# Norm:  4.2e+03
# {175,-80,-180,80,35,300,-240,-120,120,240,-240,-480,168,120,-840,-120,240,255,60}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[2]*Zeta[3],Log[2]*PolyLog[3, 1/3],Log[2]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(-120)
# ((175)*log(2)*log(2)*log(2)*log(2)+(-80)*log(2)*log(2)*log(2)*log(3)+(-180)*log(2)*log(2)*log(3)*log(3)+(80)*log(2)*log(3)*log(3)*log(3)+(35)*log(3)*log(3)*log(3)*log(3)+(300)*log(2)*log(2)*zeta(2)+(-240)*log(2)*log(3)*zeta(2)+(-120)*log(3)*log(3)*zeta(2)+(120)*log(3)*log(3)*polylog(2, mpf('1/3'))+(240)*log(2)*zeta(3)+(-240)*log(2)*polylog(3, mpf('1/3'))+(-480)*log(2)*polylog(3, mpf('2/3'))+(168)*zeta(2)*zeta(2)+(120)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(-840)*polylog(4, mpf('1/2'))+(-120)*polylog(4, mpf('1/3'))+(240)*polylog(4, mpf('2/3'))+(255)*polylog(4, mpf('1/4'))+(60)*polylog(4, mpf('3/4')))/(-120)

# tunkfey3('2/3')
# {160,-80,-60,60,-5,120,240,-120,-240,380,-360,-120,-84,240,-120,-480,-120,240,210,60}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(120)
tunkfey3_2d3 = lambda: ((160)*log(2)*log(2)*log(2)*log(2)+(-80)*log(2)*log(2)*log(2)*log(3)+(-60)*log(2)*log(2)*log(3)*log(3)+(60)*log(2)*log(3)*log(3)*log(3)+(-5)*log(3)*log(3)*log(3)*log(3)+(120)*log(2)*log(2)*zeta(2)+(240)*log(2)*log(3)*polylog(2, mpf('1/3'))+(-120)*log(3)*log(3)*zeta(2)+(-240)*log(3)*log(3)*polylog(2, mpf('1/3'))+(380)*log(3)*zeta(3)+(-360)*log(3)*polylog(3, mpf('1/3'))+(-120)*log(3)*polylog(3, mpf('2/3'))+(-84)*zeta(2)*zeta(2)+(240)*zeta(2)*polylog(2, mpf('1/3'))+(-120)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(-480)*polylog(4, mpf('1/2'))+(-120)*polylog(4, mpf('1/3'))+(240)*polylog(4, mpf('2/3'))+(210)*polylog(4, mpf('1/4'))+(60)*polylog(4, mpf('3/4')))/(120)

# tunkfey3(1)
# {1,-2,1,12,-12,12,-24,12,12,3}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4]}/(-12)
tunkfey3_1 = lambda: ((1)*log(2)*log(2)*log(2)*log(2)+(-2)*log(2)*log(3)*log(3)*log(3)+(1)*log(3)*log(3)*log(3)*log(3)+(12)*log(2)*log(2)*zeta(2)+(-12)*log(2)*log(3)*zeta(2)+(12)*zeta(2)*polylog(2, mpf('1/3'))+(-24)*polylog(4, mpf('1/2'))+(12)*polylog(4, mpf('1/3'))+(12)*polylog(4, mpf('2/3'))+(3)*polylog(4, mpf('1/4')))/(-12)

# tunkfey3('-1')
# {45,-60,40,180,-120,15,-120,-120,81,-360,90}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Log[2]*Zeta[3],Log[2]*PolyLog[3, 1/3],Log[2]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],PolyLog[4, 1/2],PolyLog[4, 1/4]}/(-120)
tunkfey3_m1 = lambda: ((45)*log(2)*log(2)*log(2)*log(2)+(-60)*log(2)*log(2)*log(3)*log(3)+(40)*log(2)*log(3)*log(3)*log(3)+(180)*log(2)*log(2)*zeta(2)+(-120)*log(2)*log(3)*zeta(2)+(15)*log(2)*zeta(3)+(-120)*log(2)*polylog(3, mpf('1/3'))+(-120)*log(2)*polylog(3, mpf('2/3'))+(81)*zeta(2)*zeta(2)+(-360)*polylog(4, mpf('1/2'))+(90)*polylog(4, mpf('1/4')))/(-120)

# tunkfey3('-2')
# {5,-40,30,60,-60,-120,-120,132,-120,-120,-120,15}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[3]*Log[3]*Zeta[2],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4]}/(-120)
tunkfey3_m2 = lambda: ((5)*log(2)*log(2)*log(2)*log(2)+(-40)*log(2)*log(3)*log(3)*log(3)+(30)*log(3)*log(3)*log(3)*log(3)+(60)*log(2)*log(2)*zeta(2)+(-60)*log(3)*log(3)*zeta(2)+(-120)*log(3)*polylog(3, mpf('1/3'))+(-120)*log(3)*polylog(3, mpf('2/3'))+(132)*zeta(2)*zeta(2)+(-120)*polylog(4, mpf('1/2'))+(-120)*polylog(4, mpf('1/3'))+(-120)*polylog(4, mpf('2/3'))+(15)*polylog(4, mpf('1/4')))/(-120)

# tunkfey3('-1/2')
# {-320,1020,-1620,1440,-495,2280,-360,-3600,720,1620,-360,2340,-1080,-1080,-2340,1080,1080,474,-360,240,-1080,45,-540}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[2]*PolyLog[2, 1/3],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[2]*Zeta[3],Log[2]*PolyLog[3, 1/3],Log[2]*PolyLog[3, 2/3],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(-360)
tunkfey3_m1d2 = lambda: ((-320)*log(2)*log(2)*log(2)*log(2)+(1020)*log(2)*log(2)*log(2)*log(3)+(-1620)*log(2)*log(2)*log(3)*log(3)+(1440)*log(2)*log(3)*log(3)*log(3)+(-495)*log(3)*log(3)*log(3)*log(3)+(2280)*log(2)*log(2)*zeta(2)+(-360)*log(2)*log(2)*polylog(2, mpf('1/3'))+(-3600)*log(2)*log(3)*zeta(2)+(720)*log(2)*log(3)*polylog(2, mpf('1/3'))+(1620)*log(3)*log(3)*zeta(2)+(-360)*log(3)*log(3)*polylog(2, mpf('1/3'))+(2340)*log(2)*zeta(3)+(-1080)*log(2)*polylog(3, mpf('1/3'))+(-1080)*log(2)*polylog(3, mpf('2/3'))+(-2340)*log(3)*zeta(3)+(1080)*log(3)*polylog(3, mpf('1/3'))+(1080)*log(3)*polylog(3, mpf('2/3'))+(474)*zeta(2)*zeta(2)+(-360)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(240)*polylog(4, mpf('1/2'))+(-1080)*polylog(4, mpf('2/3'))+(45)*polylog(4, mpf('1/4'))+(-540)*polylog(4, mpf('3/4')))/(-360)

# sage: findRelation(lambda: tunkfey3("1/4"), ZL(4,4))
# Found relation:
# Error: 7.68e+02 ulp
# Norm:  6.5e+04
# {38,-2064,4716,-3816,1035,-4872,1728,8496,-1728,-3168,864,-8424,4896,4896,4212,-2448,-2448,-168,-864,864,624,-504,576,-522,540}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[2]*PolyLog[2, 1/3],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[2]*Zeta[3],Log[2]*PolyLog[3, 1/3],Log[2]*PolyLog[3, 2/3],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(144)
# ((38)*log(2)*log(2)*log(2)*log(2)+(-2064)*log(2)*log(2)*log(2)*log(3)+(4716)*log(2)*log(2)*log(3)*log(3)+(-3816)*log(2)*log(3)*log(3)*log(3)+(1035)*log(3)*log(3)*log(3)*log(3)+(-4872)*log(2)*log(2)*zeta(2)+(1728)*log(2)*log(2)*polylog(2, mpf('1/3'))+(8496)*log(2)*log(3)*zeta(2)+(-1728)*log(2)*log(3)*polylog(2, mpf('1/3'))+(-3168)*log(3)*log(3)*zeta(2)+(864)*log(3)*log(3)*polylog(2, mpf('1/3'))+(-8424)*log(2)*zeta(3)+(4896)*log(2)*polylog(3, mpf('1/3'))+(4896)*log(2)*polylog(3, mpf('2/3'))+(4212)*log(3)*zeta(3)+(-2448)*log(3)*polylog(3, mpf('1/3'))+(-2448)*log(3)*polylog(3, mpf('2/3'))+(-168)*zeta(2)*zeta(2)+(-864)*zeta(2)*polylog(2, mpf('1/3'))+(864)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(624)*polylog(4, mpf('1/2'))+(-504)*polylog(4, mpf('1/3'))+(576)*polylog(4, mpf('2/3'))+(-522)*polylog(4, mpf('1/4'))+(540)*polylog(4, mpf('3/4')))/(144)

## }}}
## {{{ Tunk-Fey output, Integral 2

# tunkfey2(-8)
# Found relation:
# Error: 0.00e+00 ulp
# Norm:  3.2e+03
# {65,-144,144,-180,90,-228,450,-72,-333,36,468,-216,-216,-123,-18,36,-24,216,-9,108}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(-36)
# ((65)*log(2)*log(2)*log(2)*log(2)+(-144)*log(2)*log(2)*log(2)*log(3)+(144)*log(2)*log(2)*log(3)*log(3)+(-180)*log(2)*log(3)*log(3)*log(3)+(90)*log(3)*log(3)*log(3)*log(3)+(-228)*log(2)*log(2)*zeta(2)+(450)*log(2)*log(3)*zeta(2)+(-72)*log(2)*log(3)*polylog(2, mpf('1/3'))+(-333)*log(3)*log(3)*zeta(2)+(36)*log(3)*log(3)*polylog(2, mpf('1/3'))+(468)*log(3)*zeta(3)+(-216)*log(3)*polylog(3, mpf('1/3'))+(-216)*log(3)*polylog(3, mpf('2/3'))+(-123)*zeta(2)*zeta(2)+(-18)*zeta(2)*polylog(2, mpf('1/3'))+(36)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(-24)*polylog(4, mpf('1/2'))+(216)*polylog(4, mpf('2/3'))+(-9)*polylog(4, mpf('1/4'))+(108)*polylog(4, mpf('3/4')))/(-36)

# -3
# {-2200,4080,-4140,1920,-15,11040,-12240,-720,2160,360,2880,-2880,-5760,4152,-720,360,-3840,2520,-5040,-3060}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[2]*Zeta[3],Log[2]*PolyLog[3, 1/3],Log[2]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 3/4]}/(1440)
# ((-2200)*log(2)*log(2)*log(2)*log(2)+(4080)*log(2)*log(2)*log(2)*log(3)+(-4140)*log(2)*log(2)*log(3)*log(3)+(1920)*log(2)*log(3)*log(3)*log(3)+(-15)*log(3)*log(3)*log(3)*log(3)+(11040)*log(2)*log(2)*zeta(2)+(-12240)*log(2)*log(3)*zeta(2)+(-720)*log(2)*log(3)*polylog(2, mpf('1/3'))+(2160)*log(3)*log(3)*zeta(2)+(360)*log(3)*log(3)*polylog(2, mpf('1/3'))+(2880)*log(2)*zeta(3)+(-2880)*log(2)*polylog(3, mpf('1/3'))+(-5760)*log(2)*polylog(3, mpf('2/3'))+(4152)*zeta(2)*zeta(2)+(-720)*zeta(2)*polylog(2, mpf('1/3'))+(360)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(-3840)*polylog(4, mpf('1/2'))+(2520)*polylog(4, mpf('1/3'))+(-5040)*polylog(4, mpf('2/3'))+(-3060)*polylog(4, mpf('3/4')))/(1440)

# tunkfey2(-2)
# Found relation:
# Error: 2.12e+02 ulp
# Norm:  2.9e+03
# {-10,-60,140,-75,-120,-120,120,180,-60,240,240,-324,120,-60,240,240,240,-30}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4]}/(-240)
# ((-10)*log(2)*log(2)*log(2)*log(2)+(-60)*log(2)*log(2)*log(3)*log(3)+(140)*log(2)*log(3)*log(3)*log(3)+(-75)*log(3)*log(3)*log(3)*log(3)+(-120)*log(2)*log(2)*zeta(2)+(-120)*log(2)*log(3)*zeta(2)+(120)*log(2)*log(3)*polylog(2, mpf('1/3'))+(180)*log(3)*log(3)*zeta(2)+(-60)*log(3)*log(3)*polylog(2, mpf('1/3'))+(240)*log(3)*polylog(3, mpf('1/3'))+(240)*log(3)*polylog(3, mpf('2/3'))+(-324)*zeta(2)*zeta(2)+(120)*zeta(2)*polylog(2, mpf('1/3'))+(-60)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(240)*polylog(4, mpf('1/2'))+(240)*polylog(4, mpf('1/3'))+(240)*polylog(4, mpf('2/3'))+(-30)*polylog(4, mpf('1/4')))/(-240)

# tunkfey2(-1)
# Found relation:
# Error: 0.00e+00 ulp
# Norm:  7.1e+03
# {205,-360,240,660,-540,-90,90,-720,-720,609,-180,-1560,405}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Log[3]*Log[3]*Zeta[2],Log[2]*Zeta[3],Log[2]*PolyLog[3, 1/3],Log[2]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/4]}/(720)
# ((205)*log(2)*log(2)*log(2)*log(2)+(-360)*log(2)*log(2)*log(3)*log(3)+(240)*log(2)*log(3)*log(3)*log(3)+(660)*log(2)*log(2)*zeta(2)+(-540)*log(2)*log(3)*zeta(2)+(-90)*log(3)*log(3)*zeta(2)+(90)*log(2)*zeta(3)+(-720)*log(2)*polylog(3, mpf('1/3'))+(-720)*log(2)*polylog(3, mpf('2/3'))+(609)*zeta(2)*zeta(2)+(-180)*zeta(2)*polylog(2, mpf('1/3'))+(-1560)*polylog(4, mpf('1/2'))+(405)*polylog(4, mpf('1/4')))/(720)

# tunkfey2(1)
# Found relation:
# Error: 2.20e+01 ulp
# Norm:  7.2e+02
# {-5,20,-20,5,-60,120,-40,-60,20,16,-120,20,120,-15}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/4]}/(-80)
# ((-5)*log(2)*log(2)*log(2)*log(2)+(20)*log(2)*log(2)*log(3)*log(3)+(-20)*log(2)*log(3)*log(3)*log(3)+(5)*log(3)*log(3)*log(3)*log(3)+(-60)*log(2)*log(2)*zeta(2)+(120)*log(2)*log(3)*zeta(2)+(-40)*log(2)*log(3)*polylog(2, mpf('1/3'))+(-60)*log(3)*log(3)*zeta(2)+(20)*log(3)*log(3)*polylog(2, mpf('1/3'))+(16)*zeta(2)*zeta(2)+(-120)*zeta(2)*polylog(2, mpf('1/3'))+(20)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(120)*polylog(4, mpf('1/2'))+(-15)*polylog(4, mpf('1/4')))/(-80)

# tunkfey2(-1/2)
# Found relation:
# Error: 5.63e+03 ulp
# Norm:  5.4e+04
# {565,-1980,3330,-3060,1035,-3660,540,7200,-1800,-3600,900,-4680,2160,2160,4680,-2160,-2160,-588,-720,900,-1560,2160,-135,1080}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[2]*PolyLog[2, 1/3],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[2]*Zeta[3],Log[2]*PolyLog[3, 1/3],Log[2]*PolyLog[3, 2/3],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(-720)
# ((565)*log(2)*log(2)*log(2)*log(2)+(-1980)*log(2)*log(2)*log(2)*log(3)+(3330)*log(2)*log(2)*log(3)*log(3)+(-3060)*log(2)*log(3)*log(3)*log(3)+(1035)*log(3)*log(3)*log(3)*log(3)+(-3660)*log(2)*log(2)*zeta(2)+(540)*log(2)*log(2)*polylog(2, mpf('1/3'))+(7200)*log(2)*log(3)*zeta(2)+(-1800)*log(2)*log(3)*polylog(2, mpf('1/3'))+(-3600)*log(3)*log(3)*zeta(2)+(900)*log(3)*log(3)*polylog(2, mpf('1/3'))+(-4680)*log(2)*zeta(3)+(2160)*log(2)*polylog(3, mpf('1/3'))+(2160)*log(2)*polylog(3, mpf('2/3'))+(4680)*log(3)*zeta(3)+(-2160)*log(3)*polylog(3, mpf('1/3'))+(-2160)*log(3)*polylog(3, mpf('2/3'))+(-588)*zeta(2)*zeta(2)+(-720)*zeta(2)*polylog(2, mpf('1/3'))+(900)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(-1560)*polylog(4, mpf('1/2'))+(2160)*polylog(4, mpf('2/3'))+(-135)*polylog(4, mpf('1/4'))+(1080)*polylog(4, mpf('3/4')))/(-720)

# tunkfey2(2/3)
# Found relation:
# Error: 8.19e+03 ulp
# Norm:  8.2e+04
# {-4210,5040,-2700,1320,-675,8520,-10800,-2160,4680,1440,-4560,4320,1440,2928,-2160,1080,4080,3960,-7920,-2790,-3780}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(1440)
# ((-4210)*log(2)*log(2)*log(2)*log(2)+(5040)*log(2)*log(2)*log(2)*log(3)+(-2700)*log(2)*log(2)*log(3)*log(3)+(1320)*log(2)*log(3)*log(3)*log(3)+(-675)*log(3)*log(3)*log(3)*log(3)+(8520)*log(2)*log(2)*zeta(2)+(-10800)*log(2)*log(3)*zeta(2)+(-2160)*log(2)*log(3)*polylog(2, mpf('1/3'))+(4680)*log(3)*log(3)*zeta(2)+(1440)*log(3)*log(3)*polylog(2, mpf('1/3'))+(-4560)*log(3)*zeta(3)+(4320)*log(3)*polylog(3, mpf('1/3'))+(1440)*log(3)*polylog(3, mpf('2/3'))+(2928)*zeta(2)*zeta(2)+(-2160)*zeta(2)*polylog(2, mpf('1/3'))+(1080)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(4080)*polylog(4, mpf('1/2'))+(3960)*polylog(4, mpf('1/3'))+(-7920)*polylog(4, mpf('2/3'))+(-2790)*polylog(4, mpf('1/4'))+(-3780)*polylog(4, mpf('3/4')))/(1440)

# tunkfey2(1/4)
# Found relation:
# Error: 2.46e+04 ulp
# Norm:  3.4e+05
# {-1535,11520,-23220,19080,-5175,26940,-5040,-48600,7200,18180,-3600,42120,-24480,-24480,-21060,12240,12240,2184,4680,-3600,-1560,2520,-7200,2655,-4860}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[2]*PolyLog[2, 1/3],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[2]*Zeta[3],Log[2]*PolyLog[3, 1/3],Log[2]*PolyLog[3, 2/3],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(720)
# ((-1535)*log(2)*log(2)*log(2)*log(2)+(11520)*log(2)*log(2)*log(2)*log(3)+(-23220)*log(2)*log(2)*log(3)*log(3)+(19080)*log(2)*log(3)*log(3)*log(3)+(-5175)*log(3)*log(3)*log(3)*log(3)+(26940)*log(2)*log(2)*zeta(2)+(-5040)*log(2)*log(2)*polylog(2, mpf('1/3'))+(-48600)*log(2)*log(3)*zeta(2)+(7200)*log(2)*log(3)*polylog(2, mpf('1/3'))+(18180)*log(3)*log(3)*zeta(2)+(-3600)*log(3)*log(3)*polylog(2, mpf('1/3'))+(42120)*log(2)*zeta(3)+(-24480)*log(2)*polylog(3, mpf('1/3'))+(-24480)*log(2)*polylog(3, mpf('2/3'))+(-21060)*log(3)*zeta(3)+(12240)*log(3)*polylog(3, mpf('1/3'))+(12240)*log(3)*polylog(3, mpf('2/3'))+(2184)*zeta(2)*zeta(2)+(4680)*zeta(2)*polylog(2, mpf('1/3'))+(-3600)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(-1560)*polylog(4, mpf('1/2'))+(2520)*polylog(4, mpf('1/3'))+(-7200)*polylog(4, mpf('2/3'))+(2655)*polylog(4, mpf('1/4'))+(-4860)*polylog(4, mpf('3/4')))/(720)

## }}}
## {{{ Tunk-fey integral 1

# tunkfey1(-8)
# Found relation:
# Error: 1.02e+03 ulp
# Norm:  7.4e+03
# {-506,528,-252,8,-15,840,-1008,-288,336,144,-264,96,96,216,-144,144,816,168,-624,-414,-396}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(96)
# ((-506)*log(2)*log(2)*log(2)*log(2)+(528)*log(2)*log(2)*log(2)*log(3)+(-252)*log(2)*log(2)*log(3)*log(3)+(8)*log(2)*log(3)*log(3)*log(3)+(-15)*log(3)*log(3)*log(3)*log(3)+(840)*log(2)*log(2)*zeta(2)+(-1008)*log(2)*log(3)*zeta(2)+(-288)*log(2)*log(3)*polylog(2, mpf('1/3'))+(336)*log(3)*log(3)*zeta(2)+(144)*log(3)*log(3)*polylog(2, mpf('1/3'))+(-264)*log(3)*zeta(3)+(96)*log(3)*polylog(3, mpf('1/3'))+(96)*log(3)*polylog(3, mpf('2/3'))+(216)*zeta(2)*zeta(2)+(-144)*zeta(2)*polylog(2, mpf('1/3'))+(144)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(816)*polylog(4, mpf('1/2'))+(168)*polylog(4, mpf('1/3'))+(-624)*polylog(4, mpf('2/3'))+(-414)*polylog(4, mpf('1/4'))+(-396)*polylog(4, mpf('3/4')))/(96)

# tunkfey1(-3)
# Found relation:
# Error: 0.00e+00 ulp
# Norm:  3.0e+04
# {940,-1680,1260,-720,345,-2400,2880,-360,720,-1440,1440,2880,-720,96,720,-3360,3240,-2160,360,1260}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[2]*Zeta[3],Log[2]*PolyLog[3, 1/3],Log[2]*PolyLog[3, 2/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(-1440)
# ((940)*log(2)*log(2)*log(2)*log(2)+(-1680)*log(2)*log(2)*log(2)*log(3)+(1260)*log(2)*log(2)*log(3)*log(3)+(-720)*log(2)*log(3)*log(3)*log(3)+(345)*log(3)*log(3)*log(3)*log(3)+(-2400)*log(2)*log(2)*zeta(2)+(2880)*log(2)*log(3)*zeta(2)+(-360)*log(3)*log(3)*zeta(2)+(720)*log(3)*log(3)*polylog(2, mpf('1/3'))+(-1440)*log(2)*zeta(3)+(1440)*log(2)*polylog(3, mpf('1/3'))+(2880)*log(2)*polylog(3, mpf('2/3'))+(-720)*log(3)*polylog(3, mpf('2/3'))+(96)*zeta(2)*zeta(2)+(720)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(-3360)*polylog(4, mpf('1/2'))+(3240)*polylog(4, mpf('1/3'))+(-2160)*polylog(4, mpf('2/3'))+(360)*polylog(4, mpf('1/4'))+(1260)*polylog(4, mpf('3/4')))/(-1440)

# tunkfey1(-2)
# Found relation:
# Error: 1.20e+01 ulp
# Norm:  3.1e+02
# {12,-24,11,24,-24,-36,12,24,-24,-24,12,-24,12}.{Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3]}/(48)
# ((12)*log(2)*log(2)*log(3)*log(3)+(-24)*log(2)*log(3)*log(3)*log(3)+(11)*log(3)*log(3)*log(3)*log(3)+(24)*log(2)*log(3)*zeta(2)+(-24)*log(2)*log(3)*polylog(2, mpf('1/3'))+(-36)*log(3)*log(3)*zeta(2)+(12)*log(3)*log(3)*polylog(2, mpf('1/3'))+(24)*log(3)*zeta(3)+(-24)*log(3)*polylog(3, mpf('1/3'))+(-24)*log(3)*polylog(3, mpf('2/3'))+(12)*zeta(2)*zeta(2)+(-24)*zeta(2)*polylog(2, mpf('1/3'))+(12)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3')))/(48)
# Accurate digits: inf

# tunkfey1(-1)
# Found relation:
# Error: 2.56e+02 ulp
# Norm:  2.1e+04
# {-910,720,180,-120,-135,600,-1440,1440,-180,1440,1440,-1260,264,720,2640,-1080,-2160,-990,-540}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Log[3]*Log[3]*Zeta[2],Log[2]*Zeta[3],Log[2]*PolyLog[3, 1/3],Log[2]*PolyLog[3, 2/3],Log[3]*Zeta[3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(-2880)
# ((-910)*log(2)*log(2)*log(2)*log(2)+(720)*log(2)*log(2)*log(2)*log(3)+(180)*log(2)*log(2)*log(3)*log(3)+(-120)*log(2)*log(3)*log(3)*log(3)+(-135)*log(3)*log(3)*log(3)*log(3)+(600)*log(2)*log(2)*zeta(2)+(-1440)*log(2)*log(3)*zeta(2)+(1440)*log(3)*log(3)*zeta(2)+(-180)*log(2)*zeta(3)+(1440)*log(2)*polylog(3, mpf('1/3'))+(1440)*log(2)*polylog(3, mpf('2/3'))+(-1260)*log(3)*zeta(3)+(264)*zeta(2)*zeta(2)+(720)*zeta(2)*polylog(2, mpf('1/3'))+(2640)*polylog(4, mpf('1/2'))+(-1080)*polylog(4, mpf('1/3'))+(-2160)*polylog(4, mpf('2/3'))+(-990)*polylog(4, mpf('1/4'))+(-540)*polylog(4, mpf('3/4')))/(-2880)

# tunkfey1(1)
# Found relation:
# Error: 8.60e+01 ulp
# Norm:  8.2e+02
# {-5,20,-15,-60,60,-60,60,60,-48,-60,120,60,60,-15}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4]}/(-120)
# ((-5)*log(2)*log(2)*log(2)*log(2)+(20)*log(2)*log(3)*log(3)*log(3)+(-15)*log(3)*log(3)*log(3)*log(3)+(-60)*log(2)*log(2)*zeta(2)+(60)*log(2)*log(3)*zeta(2)+(-60)*log(3)*zeta(3)+(60)*log(3)*polylog(3, mpf('1/3'))+(60)*log(3)*polylog(3, mpf('2/3'))+(-48)*zeta(2)*zeta(2)+(-60)*zeta(2)*polylog(2, mpf('1/3'))+(120)*polylog(4, mpf('1/2'))+(60)*polylog(4, mpf('1/3'))+(60)*polylog(4, mpf('2/3'))+(-15)*polylog(4, mpf('1/4')))/(-120)
# Accurate digits: 300.0

# tunkfey1(-1/2)
# Found relation:
# Error: 0.00e+00 ulp
# Norm:  7.6e+02
# {-25,-16,54,-24,-5,-24,12,48,-24,24,12,-156,72,72,-24,24,24,12,24,-39}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[2]*PolyLog[2, 1/3],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[2]*Zeta[3],Log[2]*PolyLog[3, 1/3],Log[2]*PolyLog[3, 2/3],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/4]}/(-48)
# ((-25)*log(2)*log(2)*log(2)*log(2)+(-16)*log(2)*log(2)*log(2)*log(3)+(54)*log(2)*log(2)*log(3)*log(3)+(-24)*log(2)*log(3)*log(3)*log(3)+(-5)*log(3)*log(3)*log(3)*log(3)+(-24)*log(2)*log(2)*zeta(2)+(12)*log(2)*log(2)*polylog(2, mpf('1/3'))+(48)*log(2)*log(3)*zeta(2)+(-24)*log(2)*log(3)*polylog(2, mpf('1/3'))+(24)*log(3)*log(3)*zeta(2)+(12)*log(3)*log(3)*polylog(2, mpf('1/3'))+(-156)*log(2)*zeta(3)+(72)*log(2)*polylog(3, mpf('1/3'))+(72)*log(2)*polylog(3, mpf('2/3'))+(-24)*log(3)*zeta(3)+(24)*log(3)*polylog(3, mpf('1/3'))+(24)*log(3)*polylog(3, mpf('2/3'))+(12)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(24)*polylog(4, mpf('1/2'))+(-39)*polylog(4, mpf('1/4')))/(-48)

# tunkfey1(2/3)
# Found relation:
# Error: 6.40e+01 ulp
# Norm:  2.8e+03
# {95,-120,105,-90,40,-300,390,-30,-180,30,160,-150,-30,-126,-30,15,120,-270,360,45,90}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 1/3],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(-60)
# ((95)*log(2)*log(2)*log(2)*log(2)+(-120)*log(2)*log(2)*log(2)*log(3)+(105)*log(2)*log(2)*log(3)*log(3)+(-90)*log(2)*log(3)*log(3)*log(3)+(40)*log(3)*log(3)*log(3)*log(3)+(-300)*log(2)*log(2)*zeta(2)+(390)*log(2)*log(3)*zeta(2)+(-30)*log(2)*log(3)*polylog(2, mpf('1/3'))+(-180)*log(3)*log(3)*zeta(2)+(30)*log(3)*log(3)*polylog(2, mpf('1/3'))+(160)*log(3)*zeta(3)+(-150)*log(3)*polylog(3, mpf('1/3'))+(-30)*log(3)*polylog(3, mpf('2/3'))+(-126)*zeta(2)*zeta(2)+(-30)*zeta(2)*polylog(2, mpf('1/3'))+(15)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(120)*polylog(4, mpf('1/2'))+(-270)*polylog(4, mpf('1/3'))+(360)*polylog(4, mpf('2/3'))+(45)*polylog(4, mpf('1/4'))+(90)*polylog(4, mpf('3/4')))/(-60)

# tunkfey1(1/4)
# Found relation:
# Error: 2.82e+03 ulp
# Norm:  3.4e+04
# {-790,-640,2460,-1480,5,-2880,240,4680,-240,-120,120,-7020,4080,4080,-120,120,120,-492,-120,120,2160,360,-1500,180}.{Log[2]*Log[2]*Log[2]*Log[2],Log[2]*Log[2]*Log[2]*Log[3],Log[2]*Log[2]*Log[3]*Log[3],Log[2]*Log[3]*Log[3]*Log[3],Log[3]*Log[3]*Log[3]*Log[3],Log[2]*Log[2]*Zeta[2],Log[2]*Log[2]*PolyLog[2, 1/3],Log[2]*Log[3]*Zeta[2],Log[2]*Log[3]*PolyLog[2, 1/3],Log[3]*Log[3]*Zeta[2],Log[3]*Log[3]*PolyLog[2, 1/3],Log[2]*Zeta[3],Log[2]*PolyLog[3, 1/3],Log[2]*PolyLog[3, 2/3],Log[3]*Zeta[3],Log[3]*PolyLog[3, 1/3],Log[3]*PolyLog[3, 2/3],Zeta[2]*Zeta[2],Zeta[2]*PolyLog[2, 1/3],PolyLog[2, 1/3]*PolyLog[2, 1/3],PolyLog[4, 1/2],PolyLog[4, 2/3],PolyLog[4, 1/4],PolyLog[4, 3/4]}/(-240)
# ((-790)*log(2)*log(2)*log(2)*log(2)+(-640)*log(2)*log(2)*log(2)*log(3)+(2460)*log(2)*log(2)*log(3)*log(3)+(-1480)*log(2)*log(3)*log(3)*log(3)+(5)*log(3)*log(3)*log(3)*log(3)+(-2880)*log(2)*log(2)*zeta(2)+(240)*log(2)*log(2)*polylog(2, mpf('1/3'))+(4680)*log(2)*log(3)*zeta(2)+(-240)*log(2)*log(3)*polylog(2, mpf('1/3'))+(-120)*log(3)*log(3)*zeta(2)+(120)*log(3)*log(3)*polylog(2, mpf('1/3'))+(-7020)*log(2)*zeta(3)+(4080)*log(2)*polylog(3, mpf('1/3'))+(4080)*log(2)*polylog(3, mpf('2/3'))+(-120)*log(3)*zeta(3)+(120)*log(3)*polylog(3, mpf('1/3'))+(120)*log(3)*polylog(3, mpf('2/3'))+(-492)*zeta(2)*zeta(2)+(-120)*zeta(2)*polylog(2, mpf('1/3'))+(120)*polylog(2, mpf('1/3'))*polylog(2, mpf('1/3'))+(2160)*polylog(4, mpf('1/2'))+(360)*polylog(4, mpf('2/3'))+(-1500)*polylog(4, mpf('1/4'))+(180)*polylog(4, mpf('3/4')))/(-240)

## }}}
## {{{ Integrals of dilogarithm powers

def iltwoSequences(n, m=1):
  if not(n >= 1) or not(m >= 1):
    raise ValueError("Invalid args %s" % (n,m))

  if n == 1:
    yield (sfo.factorial(m), 't' + 'u'*m)
    return

  for k in range(0, m+1):
    for rest in iltwoSequences(n-1, m+1-k):
      yield (sfo.binomial(m,k) * sfo.factorial(k) * rest[0], 't' + 'u'*k + rest[1])

def mzv(s):
  if len(s) == 0: return Integer('1')
  name = 'z_%s' % '_'.join(map(str, s))
  return var(name)

def iltwoIntegrate(omega):
  if len(omega) == 0:
    return mzv([])
  if omega[0] == 'u':
    return iltwoIntegrate(omega[1:])
  current, zlist = 1, []
  for w in omega[1:]:
    if w == 't':
      current += 1
    else:
      zlist.append(current + 1)
      current = 0
  return mzv(zlist) - iltwoIntegrate(omega[1:])

def iltwo(n):
  return sfo.factorial(n) * \
    sum(iltwoIntegrate(terms) * Integer(round(weight))
        for weight, terms in iltwoSequences(n))

def iltwoValue(n):
  return quad(lambda x: dilog(x)**n, [0,1])

# (defun fix-zeta (&optional mathematica)
#   (interactive "P")
#   (save-excursion
#     (goto-char (line-beginning-position))
#     (let ((end (make-marker))
#           bound)
#       (set-marker end (line-end-position))
#       (set-marker-insertion-type end t)
#       (while (< (point) end)
#         (search-forward "z" end)
#         (when mathematica
#           (delete-char -1)
#           (insert "MZV"))
#         (delete-char 1)
#         (insert (if mathematica "[" "("))
#         (setq bound (save-excursion (search-forward " " end t)))
#         (while (and bound (search-forward "_" bound t))
#           (delete-char -1)
#           (insert ","))
#         (when bound
#           (goto-char bound)
#           (delete-char -1)
#           (insert (if mathematica "] " ") "))))

#       )
#     )
#   )

# sage: iltwo(1)
# z(2) - 1
# MZV[2] - 1

# iltwo(2)
# -2*z(2) - 4*z(2,1) + 2*z(2,2) + 4*z(3,1) + 6
# -2*MZV[2] - 4*MZV[2,1] + 2*MZV[2,2] + 4*MZV[3,1] + 6

# iltwo(3)
# 18*z(2) + 36*z(2,1) + 36*z(2,1,1) - 12*z(2,1,2) - 6*z(2,2) - 24*z(2,2,1) + 6*z(2,2,2) + 12*z(2,3,1) - 12*z(3,1) - 36*z(3,1,1) + 12*z(3,1,2) + 24*z(3,2,1) + 36*z(4,1,1) - 90
# 18*MZV[2] + 36*MZV[2,1] + 36*MZV[2,1,1] - 12*MZV[2,1,2] - 6*MZV[2,2] - 24*MZV[2,2,1] + 6*MZV[2,2,2] + 12*MZV[2,3,1] - 12*MZV[3,1] - 36*MZV[3,1,1] + 12*MZV[3,1,2] + 24*MZV[3,2,1] + 36*MZV[4,1,1] - 90

# sage: iltwo(4)
# -360*z(2) - 720*z(2,1) - 864*z(2,1,1) - 576*z(2,1,1,1) + 144*z(2,1,1,2) + 144*z(2,1,2) + 288*z(2,1,2,1) - 48*z(2,1,2,2) - 96*z(2,1,3,1) + 72*z(2,2) + 288*z(2,2,1) + 432*z(2,2,1,1) - 96*z(2,2,1,2) - 24*z(2,2,2) - 192*z(2,2,2,1) + 24*z(2,2,2,2) + 48*z(2,2,3,1) - 48*z(2,3,1) - 288*z(2,3,1,1) + 48*z(2,3,1,2) + 96*z(2,3,2,1) + 144*z(2,4,1,1) + 144*z(3,1) + 432*z(3,1,1) + 576*z(3,1,1,1) - 144*z(3,1,1,2) - 48*z(3,1,2) - 288*z(3,1,2,1) + 48*z(3,1,2,2) + 96*z(3,1,3,1) - 96*z(3,2,1) - 432*z(3,2,1,1) + 96*z(3,2,1,2) + 192*z(3,2,2,1) + 288*z(3,3,1,1) - 144*z(4,1,1) - 576*z(4,1,1,1) + 144*z(4,1,1,2) + 288*z(4,1,2,1) + 432*z(4,2,1,1) + 576*z(5,1,1,1) + 2520
# -360*MZV[2] - 720*MZV[2,1] - 864*MZV[2,1,1] - 576*MZV[2,1,1,1] + 144*MZV[2,1,1,2] + 144*MZV[2,1,2] + 288*MZV[2,1,2,1] - 48*MZV[2,1,2,2] - 96*MZV[2,1,3,1] + 72*MZV[2,2] + 288*MZV[2,2,1] + 432*MZV[2,2,1,1] - 96*MZV[2,2,1,2] - 24*MZV[2,2,2] - 192*MZV[2,2,2,1] + 24*MZV[2,2,2,2] + 48*MZV[2,2,3,1] - 48*MZV[2,3,1] - 288*MZV[2,3,1,1] + 48*MZV[2,3,1,2] + 96*MZV[2,3,2,1] + 144*MZV[2,4,1,1] + 144*MZV[3,1] + 432*MZV[3,1,1] + 576*MZV[3,1,1,1] - 144*MZV[3,1,1,2] - 48*MZV[3,1,2] - 288*MZV[3,1,2,1] + 48*MZV[3,1,2,2] + 96*MZV[3,1,3,1] - 96*MZV[3,2,1] - 432*MZV[3,2,1,1] + 96*MZV[3,2,1,2] + 192*MZV[3,2,2,1] + 288*MZV[3,3,1,1] - 144*MZV[4,1,1] - 576*MZV[4,1,1,1] + 144*MZV[4,1,1,2] + 288*MZV[4,1,2,1] + 432*MZV[4,2,1,1] + 576*MZV[5,1,1,1] + 2520

# iltwo(5)
# 12600*z(2) + 25200*z(2,1) + 32400*z(2,1,1) + 28800*z(2,1,1,1) + 14400*z(2,1,1,1,1) - 2880*z(2,1,1,1,2) - 4320*z(2,1,1,2) - 5760*z(2,1,1,2,1) + 720*z(2,1,1,2,2) + 1440*z(2,1,1,3,1) - 3600*z(2,1,2) - 8640*z(2,1,2,1) - 8640*z(2,1,2,1,1) + 1440*z(2,1,2,1,2) + 720*z(2,1,2,2) + 2880*z(2,1,2,2,1) - 240*z(2,1,2,2,2) - 480*z(2,1,2,3,1) + 1440*z(2,1,3,1) + 4320*z(2,1,3,1,1) - 480*z(2,1,3,1,2) - 960*z(2,1,3,2,1) - 1440*z(2,1,4,1,1) - 1800*z(2,2) - 7200*z(2,2,1) - 12960*z(2,2,1,1) - 11520*z(2,2,1,1,1) + 2160*z(2,2,1,1,2) + 1440*z(2,2,1,2) + 4320*z(2,2,1,2,1) - 480*z(2,2,1,2,2) - 960*z(2,2,1,3,1) + 360*z(2,2,2) + 2880*z(2,2,2,1) + 6480*z(2,2,2,1,1) - 960*z(2,2,2,1,2) - 120*z(2,2,2,2) - 1920*z(2,2,2,2,1) + 120*z(2,2,2,2,2) + 240*z(2,2,2,3,1) - 240*z(2,2,3,1) - 2880*z(2,2,3,1,1) + 240*z(2,2,3,1,2) + 480*z(2,2,3,2,1) + 720*z(2,2,4,1,1) + 720*z(2,3,1) + 4320*z(2,3,1,1) + 8640*z(2,3,1,1,1) - 1440*z(2,3,1,1,2) - 240*z(2,3,1,2) - 2880*z(2,3,1,2,1) + 240*z(2,3,1,2,2) + 480*z(2,3,1,3,1) - 480*z(2,3,2,1) - 4320*z(2,3,2,1,1) + 480*z(2,3,2,1,2) + 960*z(2,3,2,2,1) + 1440*z(2,3,3,1,1) - 720*z(2,4,1,1) - 5760*z(2,4,1,1,1) + 720*z(2,4,1,1,2) + 1440*z(2,4,1,2,1) + 2160*z(2,4,2,1,1) + 2880*z(2,5,1,1,1) - 3600*z(3,1) - 10800*z(3,1,1) - 17280*z(3,1,1,1) - 14400*z(3,1,1,1,1) + 2880*z(3,1,1,1,2) + 2160*z(3,1,1,2) + 5760*z(3,1,1,2,1) - 720*z(3,1,1,2,2) - 1440*z(3,1,1,3,1) + 720*z(3,1,2) + 4320*z(3,1,2,1) + 8640*z(3,1,2,1,1) - 1440*z(3,1,2,1,2) - 240*z(3,1,2,2) - 2880*z(3,1,2,2,1) + 240*z(3,1,2,2,2) + 480*z(3,1,2,3,1) - 480*z(3,1,3,1) - 4320*z(3,1,3,1,1) + 480*z(3,1,3,1,2) + 960*z(3,1,3,2,1) + 1440*z(3,1,4,1,1) + 1440*z(3,2,1) + 6480*z(3,2,1,1) + 11520*z(3,2,1,1,1) - 2160*z(3,2,1,1,2) - 480*z(3,2,1,2) - 4320*z(3,2,1,2,1) + 480*z(3,2,1,2,2) + 960*z(3,2,1,3,1) - 960*z(3,2,2,1) - 6480*z(3,2,2,1,1) + 960*z(3,2,2,1,2) + 1920*z(3,2,2,2,1) + 2880*z(3,2,3,1,1) - 1440*z(3,3,1,1) - 8640*z(3,3,1,1,1) + 1440*z(3,3,1,1,2) + 2880*z(3,3,1,2,1) + 4320*z(3,3,2,1,1) + 5760*z(3,4,1,1,1) + 2160*z(4,1,1) + 8640*z(4,1,1,1) + 14400*z(4,1,1,1,1) - 2880*z(4,1,1,1,2) - 720*z(4,1,1,2) - 5760*z(4,1,1,2,1) + 720*z(4,1,1,2,2) + 1440*z(4,1,1,3,1) - 1440*z(4,1,2,1) - 8640*z(4,1,2,1,1) + 1440*z(4,1,2,1,2) + 2880*z(4,1,2,2,1) + 4320*z(4,1,3,1,1) - 2160*z(4,2,1,1) - 11520*z(4,2,1,1,1) + 2160*z(4,2,1,1,2) + 4320*z(4,2,1,2,1) + 6480*z(4,2,2,1,1) + 8640*z(4,3,1,1,1) - 2880*z(5,1,1,1) - 14400*z(5,1,1,1,1) + 2880*z(5,1,1,1,2) + 5760*z(5,1,1,2,1) + 8640*z(5,1,2,1,1) + 11520*z(5,2,1,1,1) + 14400*z(6,1,1,1,1) - 113400
# 12600*MZV[2] + 25200*MZV[2,1] + 32400*MZV[2,1,1] + 28800*MZV[2,1,1,1] + 14400*MZV[2,1,1,1,1] - 2880*MZV[2,1,1,1,2] - 4320*MZV[2,1,1,2] - 5760*MZV[2,1,1,2,1] + 720*MZV[2,1,1,2,2] + 1440*MZV[2,1,1,3,1] - 3600*MZV[2,1,2] - 8640*MZV[2,1,2,1] - 8640*MZV[2,1,2,1,1] + 1440*MZV[2,1,2,1,2] + 720*MZV[2,1,2,2] + 2880*MZV[2,1,2,2,1] - 240*MZV[2,1,2,2,2] - 480*MZV[2,1,2,3,1] + 1440*MZV[2,1,3,1] + 4320*MZV[2,1,3,1,1] - 480*MZV[2,1,3,1,2] - 960*MZV[2,1,3,2,1] - 1440*MZV[2,1,4,1,1] - 1800*MZV[2,2] - 7200*MZV[2,2,1] - 12960*MZV[2,2,1,1] - 11520*MZV[2,2,1,1,1] + 2160*MZV[2,2,1,1,2] + 1440*MZV[2,2,1,2] + 4320*MZV[2,2,1,2,1] - 480*MZV[2,2,1,2,2] - 960*MZV[2,2,1,3,1] + 360*MZV[2,2,2] + 2880*MZV[2,2,2,1] + 6480*MZV[2,2,2,1,1] - 960*MZV[2,2,2,1,2] - 120*MZV[2,2,2,2] - 1920*MZV[2,2,2,2,1] + 120*MZV[2,2,2,2,2] + 240*MZV[2,2,2,3,1] - 240*MZV[2,2,3,1] - 2880*MZV[2,2,3,1,1] + 240*MZV[2,2,3,1,2] + 480*MZV[2,2,3,2,1] + 720*MZV[2,2,4,1,1] + 720*MZV[2,3,1] + 4320*MZV[2,3,1,1] + 8640*MZV[2,3,1,1,1] - 1440*MZV[2,3,1,1,2] - 240*MZV[2,3,1,2] - 2880*MZV[2,3,1,2,1] + 240*MZV[2,3,1,2,2] + 480*MZV[2,3,1,3,1] - 480*MZV[2,3,2,1] - 4320*MZV[2,3,2,1,1] + 480*MZV[2,3,2,1,2] + 960*MZV[2,3,2,2,1] + 1440*MZV[2,3,3,1,1] - 720*MZV[2,4,1,1] - 5760*MZV[2,4,1,1,1] + 720*MZV[2,4,1,1,2] + 1440*MZV[2,4,1,2,1] + 2160*MZV[2,4,2,1,1] + 2880*MZV[2,5,1,1,1] - 3600*MZV[3,1] - 10800*MZV[3,1,1] - 17280*MZV[3,1,1,1] - 14400*MZV[3,1,1,1,1] + 2880*MZV[3,1,1,1,2] + 2160*MZV[3,1,1,2] + 5760*MZV[3,1,1,2,1] - 720*MZV[3,1,1,2,2] - 1440*MZV[3,1,1,3,1] + 720*MZV[3,1,2] + 4320*MZV[3,1,2,1] + 8640*MZV[3,1,2,1,1] - 1440*MZV[3,1,2,1,2] - 240*MZV[3,1,2,2] - 2880*MZV[3,1,2,2,1] + 240*MZV[3,1,2,2,2] + 480*MZV[3,1,2,3,1] - 480*MZV[3,1,3,1] - 4320*MZV[3,1,3,1,1] + 480*MZV[3,1,3,1,2] + 960*MZV[3,1,3,2,1] + 1440*MZV[3,1,4,1,1] + 1440*MZV[3,2,1] + 6480*MZV[3,2,1,1] + 11520*MZV[3,2,1,1,1] - 2160*MZV[3,2,1,1,2] - 480*MZV[3,2,1,2] - 4320*MZV[3,2,1,2,1] + 480*MZV[3,2,1,2,2] + 960*MZV[3,2,1,3,1] - 960*MZV[3,2,2,1] - 6480*MZV[3,2,2,1,1] + 960*MZV[3,2,2,1,2] + 1920*MZV[3,2,2,2,1] + 2880*MZV[3,2,3,1,1] - 1440*MZV[3,3,1,1] - 8640*MZV[3,3,1,1,1] + 1440*MZV[3,3,1,1,2] + 2880*MZV[3,3,1,2,1] + 4320*MZV[3,3,2,1,1] + 5760*MZV[3,4,1,1,1] + 2160*MZV[4,1,1] + 8640*MZV[4,1,1,1] + 14400*MZV[4,1,1,1,1] - 2880*MZV[4,1,1,1,2] - 720*MZV[4,1,1,2] - 5760*MZV[4,1,1,2,1] + 720*MZV[4,1,1,2,2] + 1440*MZV[4,1,1,3,1] - 1440*MZV[4,1,2,1] - 8640*MZV[4,1,2,1,1] + 1440*MZV[4,1,2,1,2] + 2880*MZV[4,1,2,2,1] + 4320*MZV[4,1,3,1,1] - 2160*MZV[4,2,1,1] - 11520*MZV[4,2,1,1,1] + 2160*MZV[4,2,1,1,2] + 4320*MZV[4,2,1,2,1] + 6480*MZV[4,2,2,1,1] + 8640*MZV[4,3,1,1,1] - 2880*MZV[5,1,1,1] - 14400*MZV[5,1,1,1,1] + 2880*MZV[5,1,1,1,2] + 5760*MZV[5,1,1,2,1] + 8640*MZV[5,1,2,1,1] + 11520*MZV[5,2,1,1,1] + 14400*MZV[6,1,1,1,1] - 113400

## See iltwo{7,8}.txt
# with open('iltwo6.txt', 'w') as f: f.write(str(iltwo(6)) + '\n')

## }}}
